---
title: "Untitled"
format: html
editor: source
---

```{r}
#| fig.height: 2
#| fig.width: 2

library(gridExtra)
library(tidyverse)
library(stringr)
library(Rinteract)
library(DeclareDesign)

# first get dataset

df <- fabricate(N = 1000,
                X1 = complete_ra(N),
                X2 = complete_ra(N),
                X3 = complete_ra(N),
                X4 = complete_ra(N),
                Y = X1*X2*X3 + rnorm(N))
# now run model

mod <- lm(Y~X1*X2*X3, df)

# now get conditional effects

dat <- int_conditions(mod, data=df)

# now write function to display graph

facet <- X3+X1~X2+X4

int_graph <- 
  function(data,
           facet = NULL, # no default, must specify in form of xvars~yvars
           path = NULL, # no default, must specify where to save image
           width = 45,
           height = 45
  ){
    
    facets <- 
      facet %>% 
      as.character %>% gsub("\\s", "", .)
    
    xvars <- facets %>% 
      .[2] %>% 
      strsplit("\\+") %>% 
      unlist()
    
    yvars <- facets %>% 
      .[3] %>% 
      strsplit("\\+") %>% 
      unlist()
    
    all_vars <- c(xvars, yvars)
    
    nvars <- length(all_vars)
    
    # round figures and add stars
    
    data <- 
      data %>% 
      mutate(across(where(is.numeric), round, digits = 3),
             estimate = paste0(estimate, 
                               ifelse(p.value<0.05,
                                      "*",
                                      ifelse(p.value<0.01,
                                             "**",
                                             ifelse(p.value<0.001,
                                                    "***", ""))))) %>% 
      select(-p.value)
    
    # move estimates and SEs into same column
    
    data <- 
      data %>% 
      mutate(std.error = paste0("(", std.error, ")"),
             estimate = paste0(estimate, "\n", std.error)) %>% 
      select(-std.error)
    
    # split data into structure
    
    # search all conditions excluding first x and y facet
    
    X_1 <- tail(xvars, 1)
    Y_1 <- yvars[1]
    
    cons <- c("0", "1", "mean")
    
    con_vars <- 
      all_vars %>% 
      setdiff(c(X_1, Y_1))
    
    first_vars <- setdiff(all_vars, con_vars)
    
    all_cons <- 
      eval(parse(text = 
                   paste0("expand.grid(", 
                          paste(paste0(con_vars, "=cons"), 
                                collapse=","), ")")))
    
    # get order of interaction terms
    
    int_order <- 
      data %>% 
      filter(grepl(":", effect)) %>% 
      .$effect %>% 
      unique()
    
    # get total rows needed for later
    
    totrows <- 
      ceiling((sapply(setdiff(1:nvars, c(1, nvars)),
                      function(x) choose(nvars, x)) %>% 
                 sum() + 1)/nvars) * 2
    
    # apply the following across all possible conditions
    
    # first apply across all row cons, then col cons
    
    colsdf <- 
      lapply(cons, 
             function(x){
               
               rowcons <- 
                 all_cons %>% 
                 filter(!!sym(tail(yvars, 1))==x)
               
               rowsdf <- 
                 lapply(cons,
                        function(x){
                          
                          # get current condition
                          
                          cur_con <- 
                            rowcons %>% 
                            filter(!!sym(xvars[1])==x)
                          
                          # filter dataset by condition
                          
                          small <- 
                            data %>% 
                            right_join(cur_con)
                          
                          # split into interaction and no interactions
                          
                          # create empty rows for non existent effects
                          
                          small_noint <- 
                            small %>% 
                            filter(!grepl(":", effect)) %>% 
                            group_by_(.dots = c("effect", all_vars)) %>% 
                            slice(rep(1, nvars)) %>% 
                            mutate(effect = c(effect[1], setdiff(all_vars, effect)), 
                                   estimate = c(estimate[1], rep("", nvars-1)))
                          
                          small_int <- 
                            small %>% 
                            filter(grepl(":", effect))
                          
                          # now join them
                          
                          small <- 
                            rbind(small_noint, small_int) %>% 
                            ungroup()
                          
                          #  create all placeholder 0 conditions that dont exist
                          
                          place <- 
                            eval(parse(text = 
                                         paste0("expand.grid(", 
                                                paste(paste0(all_vars, "=cons"), 
                                                      collapse=","), ")"))) %>% 
                            anti_join(small) %>% 
                            right_join(cur_con)
                          
                          place <- 
                            place %>% 
                            group_by_(.dots = all_vars) %>% 
                            slice(rep(1, nvars)) %>% 
                            mutate(effect = all_vars, .before=1) %>% 
                            ungroup() %>% 
                            mutate(estimate="")
                          
                          small <- 
                            rbind(place, small)
                          
                          # merge conditions
                          
                          small <- 
                            small %>% 
                            group_by_(.dots = c("effect", all_vars)) %>% 
                            mutate(estimate = ifelse(n()>1 & 
                                                       !all(estimate %in% "") & 
                                                       !grepl("\\d+", estimate), 
                                                     NA, 
                                                     estimate)) %>% 
                            filter(!is.na(estimate)) %>% 
                            slice(1) %>% 
                            ungroup()
                          
                          # facet first x condition, and apply over each first y condition
                          
                          small_new <- 
                            lapply(cons, function(x){
                              
                              smallx <- 
                                small %>% 
                                filter(!!sym(X_1)==x)
                              
                              lapply(cons, function(x){
                                
                                noint <- 
                                  smallx %>% 
                                  filter(!!sym(Y_1)==x & !grepl(":", effect)) %>% 
                                  select(effect, estimate) %>% 
                                  t() %>% 
                                  cbind(matrix("", 2))
                                
                                # exclude interactions
                                
                                int <- 
                                  smallx %>% 
                                  filter(!!sym(Y_1)==x & grepl(":", effect)) %>% 
                                  select(effect, estimate) %>% 
                                  mutate(effect = factor(effect, levels = int_order)) %>% 
                                  arrange(effect)
                                
                                # check if nrow is more than n_main_effects, wrap
                                
                                if(nrow(int)>nvars){
                                  
                                  out <- 
                                    split(int, (seq_len(nrow(int)) - 1) %/% (nvars))
                                  
                                  # apply to each split df
                                  
                                  int <- 
                                    lapply(out,
                                           function(x){
                                             
                                             t(x) %>% 
                                               cbind(matrix("", 2, nvars-ncol(.)))
                                             
                                           }) %>%
                                    reduce(rbind)
                                  
                                } else {
                                  
                                  int <- 
                                    t(int) %>% 
                                    cbind(matrix("", 2, nvars-ncol(.))) %>% 
                                    rbind(matrix("", totrows-nrow(.), 4))
                                }
                                
                                int <- 
                                  int %>% 
                                  cbind(matrix("", totrows, 
                                               ncol = ncol(noint) - ncol(.)))
                                
                                rbind(noint, int)
                                
                              }) %>% 
                                bind_cols() %>% 
                                add_row() %>% 
                                mutate(across(everything(), 
                                              function(x) ifelse(is.na(x), "", x)))
                              
                            }) %>% 
                            bind_rows() %>% 
                            add_row()
                          
                          small_new
                          
                        }) %>% 
                 bind_rows()
               
               # add empty row then add col headers to empty row
               
               rowsdf <- 
                 rowsdf %>% 
                 add_row(.before=1)
               
               rowsdf[1,] <- sapply(cons, 
                                      function(x){
                                        c(rep(sprintf("%s = %s", Y_1, x), 4), 
                                          "   ")
                                      }) %>% 
                 as.vector() %>% 
                 t()
               
               rowsdf
               
             }) %>% 
      
      bind_cols()
    
    # final cleaning
    
    colsdf <- 
      colsdf %>% 
      mutate(across(everything(), function(x) ifelse(is.na(x), "", x)))
    
    # now add rownames
    
    colsdf <- 
      colsdf %>% 
      mutate(condy1 = c("", 
                        rep(c(rep(sapply(cons, 
                                         function(x) sprintf("%s = %s", tail(xvars, 1), x)), 
                                  each = 2+totrows+1), "   "), 3)),
             .before=1) %>% 
      mutate(condy2 = c("",
                        rep(sapply(cons, 
                                   function(x) sprintf("%s = %s", xvars[1], x)), 
                            each = (((2+1+totrows)*3)+1))),
             .before=1)
    
    
    # now add final col headers
    
    colnames(colsdf) <- 
      c("", "", 
        sapply(cons, function(x){
          rep(sprintf("%s = %s", tail(yvars, 1), x), nvars*3+3)
        }))
    
    
    # now merge cols in gtable
    
    tab <- 
      tableGrob(colsdf, theme = ttheme_default(), rows = NULL)
    
    
    # now edit table layout
    
    # first edit col headers
    
    for(i in 1:3){
      
      # change top col
    
    tab$layout <-
      tab$layout %>% 
      mutate(l = ifelse(t==1 & l %in% (3+(i-1)*15):(14+3+(i-1)*15),
                        (3+(i-1)*15), l),
             r = ifelse(t==1 & r %in% (3+(i-1)*15):(14+3+(i-1)*15), 
                        (14+3+(i-1)*15), r))
    
    3-17
    18-32
    33-47
    
    
    
    # change outside row header
    
    tab$layout <-
      tab$layout %>%
      mutate(t = ifelse(l==1 & t %in% (3+(i-1)*28):(27+3+(i-1)*28),
                        (3+(i-1)*28), t),
             b = ifelse(l==1 & b %in% (3+(i-1)*28):(27+3+(i-1)*28),
                        (27+3+(i-1)*28), b))
    
    }


    for (i in 1:9){
      
      # change 2nd top col
      
      tab$layout <- 
        tab$layout %>% 
        mutate(l = ifelse(t==2 & l %in% (3+(i-1)*5):(3+3+(i-1)*5),
                          (3+(i-1)*5), l),
               r = ifelse(t==2 & r %in% (3+(i-1)*5):(3+3+(i-1)*5),
                          (3+3+(i-1)*5), r))
      
      # change inside row header

      tab$layout <-
        tab$layout %>%
        mutate(t = ifelse(l==2 & t %in% (3+(i-1)*9+floor((i-1)/3)):(8+3+(i-1)*9+floor((i-1)/3)),
                          (3+(i-1)*9+floor((i-1)/3)), t),
               b = ifelse(l==2 & b %in% (3+(i-1)*9+floor((i-1)/3)):(8+3+(i-1)*9+floor((i-1)/3)),
                          (8+3+(i-1)*9+floor((i-1)/3)), b))
      
    }
    
    p <- ggplotify::as.ggplot(tab)
    
    ggsave(path, p, width = width, height = height, units = "in", limitsize = FALSE)
    
    
  }

testdf <- 
  data.frame(x=rep(LETTERS[1:3], each=3), b=letters[1:9], c=1:9)

halign <- tableGrob(small_new, theme = ttheme_default(), rows = NULL)



p <- ggplotify::as.ggplot(tab)

ggsave("test.png", p, width = 50, height = 50, units = "in", limitsize = FALSE)

# halign$layout <- 
#   halign$layout[halign$layout$t != 1 &
#                   halign$layout$l == 1, ] %>% 
#   mutate(b = ifelse(t %in% 2:4, 4, b))

print(p)

```

```{r}
#| fig.height: 1
#| fig.width: 1

knitr::include_graphics('test.png')

```

```{r}

library(ggplot2)
library(gtable)

# Create a plot
p <- ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point()

# Get the plot gtable
g <- ggplotGrob(p)

# Add three cells with different z values
g <- gtable_add_cols(g, unit(1, "in"), 0)
g <- gtable_add_rows(g, unit(1, "in"), 0)
g <- gtable_add_grob(g, rectGrob(), t = 2, l = 2, b = 4, r = 4, z = 2, name = "cell2")
g <- gtable_add_grob(g, rectGrob(), t = 3, l = 3, b = 5, r = 5, z = 1, name = "cell1")
g <- gtable_add_grob(g, rectGrob(), t = 1, l = 1, b = 3, r = 3, z = 3, name = "cell3")

# Plot the gtable
grid::grid.newpage()
grid::grid.draw(g)



```
