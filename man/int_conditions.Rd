% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/int_conditions.R
\name{int_conditions}
\alias{int_conditions}
\title{Generate conditional means and effects from a model with interactions}
\usage{
int_conditions(
  mod,
  data = NULL,
  main_vars = NULL,
  zero_con = 0,
  .names = NULL,
  pred_vars = NULL,
  fixef = NULL,
  conmeans = TRUE
)
}
\arguments{
\item{mod}{A model object}

\item{data}{Dataset used when fitting model}

\item{main_vars}{A vector of variable names in the interaction of interest. If unspecified, takes by default variables from the highest order interaction}

\item{zero_con}{By default the function returns conditional effects for the 0, 1, and mean (all) conditions. However you can also specify alternative values other than 0 to replace the zero condition. Must be a list of named integers where name corresponds to a variable name in the model. Variables whose names are not supplied automatically default to 0.}

\item{.names}{A named vector for renaming variables}

\item{pred_vars}{int_conditions cannot return model predictions if there exists other variables beyond the interaction terms that are not supplied. To generate predictions from these models, supply a named dataframe of dimension 1*n, where n is the number of missing variables. Column names must correspond to terms used in model supplied and column values must be a singular numerical value. The default behaviour is to average predictions across all possible combinations of these variables.}

\item{fixef}{Are there fixed effects within the model? If so these must be supplied in order for predictions to be generated. The argument takes a list of named factors and generates predictions across the mean of all combinations of fixed effects.}

\item{conmeans}{Should conditional means be returned? Defaults to `TRUE`.}
}
\value{
A data frame object that contains all effects, respective conditions, and estimated hypotheses
}
\description{
Conducts hypothesis testing across all conditions of interaction effects of a fitted model
}
\examples{
library(fixest)
set.seed(1)
dat <- data.frame(X1 = sample(0:1, 100, replace=TRUE), X2 = sample(0:1, 100, replace=TRUE), X3 = sample(0:1, 100, replace=TRUE), FE = rep(1:5, 20))
dat <- dat |> transform(Y = X1 + 2*X2 + 3*X1*X2 + X3 + rnorm(1))
mod <- lm_robust(Y~X1*X2, dat, fixed_effects = ~FE)
cond_tab <- int_conditions(mod, data = dat, main_vars = c("X1", "X2"), .names = c(A1 = "X1", A2 = "X2"), fixef = list(FE = factor(1:5)))

}
