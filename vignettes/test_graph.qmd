---
title: "Means and effects"
date: "2023-03-16"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(DeclareDesign)
library(Rinteract)
library(tidyverse)
library(ggh4x)

```


```{r}
df <- fabricate(2000,
                X1 = complete_ra(N),
                X2 = complete_ra(N),
                X3 = complete_ra(N),
                X4 = complete_ra(N),
                Y = X1 + X3 + X1*X2*X3*X4 + rnorm(N))

```

Write function

```{r}
#| fig.height: 14
#| fig.width: 14

int_graph <- 
  function(data, # a data frame of the form returned by Rinteract::int_conditions
           facet = NULL, # no default, must be supplied
           digits = 3, # number of digits to display after decimal point
           width = 10, # width for wrapping
           col_level = "gray95",
           col_effect = c("0" = "dodgerblue", # must be named vector
                          "1" = "chartreuse", 
                          "all" ="tomato", 
                          "effect" = "gold"),
           alpha = c(1, 0.5, 1, 0.5), # when plotting a 4way interaction, what is the alpha value for each facet row? 
           col_label = "wheat"
  ){
    
    if(is.null(facet)) stop("facet argument cannot be empty!")
    
    data <-
      data %>% 
      mutate(label = paste0(round(estimate, digits), "\n(", round(std.error, digits), ")"),
             x = 1, y = 1) 
    
    p <- 
      data |>
      ggplot(aes(x, y, label = label)) + 
      facet_nested(facet, 
                   labeller = label_wrap_gen_both(width), 
                   switch="y") + 
      theme_void() +
      theme(legend.position = "none",
            strip.background = element_rect(fill=col_label, colour = "white", 
                                            linewidth = 0.8, 
                                            linetype = 1),
            strip.text = element_text(colour = "black", size = rel(1),
                                      margin = margin(5, 5, 5, 5))
      )
    
    # get number of variables
    
    facet_char <- setdiff(as.character(facet), "~")
    
    lhs <- trimws(unlist(strsplit(facet_char[1], "\\+")))[1]
    rhs <- trimws(unlist(strsplit(facet_char[2], "\\+")))[1]
    
    vars <- 
      trimws(unlist(strsplit(facet_char, "\\+")))
    
    if(length(vars)==2){
      
      p <- 
        p +
        geom_rect(aes(fill = value), xmin = -Inf, xmax = Inf,
                  ymin = -Inf, ymax = Inf, alpha = 1) +
        scale_fill_manual(values = c("Level" = "gray95", "Causal effect" = "cadetblue1"))
      
    } else if(length(vars)==3){
      
      # which variable to set effect colours
      
      eff_var <- 
        c(lhs, rhs)[grepl("\\+", facet_char)]
      
      p <- 
        p +
        geom_rect(aes(fill = eval(parse(text = eff_var))), xmin = -Inf, xmax = Inf,
                  ymin = -Inf, ymax = Inf, alpha = 1) +
        geom_rect(data = subset(data, value=="Level"), fill = col_level, xmin = -Inf, xmax = Inf,
                  ymin = -Inf, ymax = Inf) +
        scale_fill_manual(values=col_effect) 
      
      
    } else if(length(vars)==4){
      
      loop_df <- 
        data.frame(vals = names(col_effect), alpha = alpha)
      
      for (i in 1:4){
        
        p <- 
          p + 
          geom_rect(data = subset(data, eval(parse(text = lhs[1]))==loop_df$vals[i] & value!="Level"), 
                    aes(fill = eval(parse(text = rhs[1]))), 
                    xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf, alpha = loop_df$alpha[i])
        
      }
      
      p <- 
        p + 
        scale_fill_manual(values=col_effect) +
        geom_rect(data = subset(data, value=="Level"), fill = col_level, xmin = -Inf, xmax = Inf,
                  ymin = -Inf, ymax = Inf)
      
    }
    
    p +
      geom_text()
    
  }


```

Test function

2-way interaction

```{r}
#| fig.height: 3
#| fig.width: 7

model <- lm(Y ~ X1 * X2, data = df)

data <-
  int_conditions(model, df)

int_graph(data, facet = X1~X2) +
  ggtitle("test")


```


3-way interaction

```{r}
#| fig.height: 7
#| fig.width: 14

model <- lm(Y ~ X1 * X2 * X3, data = df)

data <-
  int_conditions(model, df)

int_graph(data, facet = X1~X2+X3) +
  ggtitle("3way interaction")


```


4-way interaction

```{r}
#| fig.height: 14
#| fig.width: 14

model <- lm(Y ~ X1 * X2 * X3 * X4, data = df)

data <-
  int_conditions(model, df)

int_graph(data, facet = X1+X2~X3+X4) +
  ggtitle("4way interaction")


```
